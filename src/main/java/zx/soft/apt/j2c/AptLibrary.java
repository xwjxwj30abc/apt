package zx.soft.apt.j2c;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.PointerByReference;

/**
 * JNA Wrapper for library <b>apt</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface AptLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "apt";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AptLibrary.JNA_LIBRARY_NAME);
	public static final AptLibrary INSTANCE = (AptLibrary) Native.loadLibrary(AptLibrary.JNA_LIBRARY_NAME,
			AptLibrary.class);
	public static final int APT_OK = 0;
	public static final int APT_NEED_MORE = 1;
	public static final int APT_CONNTRACK = 2;
	public static final int APT_FILE = 3;
	public static final int APT_ALTER = 4;
	public static final int APT_ERR_MEM = 0x1000;
	public static final int APT_ERR_BUF = (0x1000 + 1);
	public static final int APT_ERR_DISK = (0x1000 + 2);

	/**
	 * conntrack info<br>
	 * <i>native declaration : line 27</i>
	 */
	public static class apt_conntrack extends Structure {
		public long ts;
		public byte type;
		public byte protocol;
		public short service;
		/** C type : void* */
		public Pointer data;
		public int len;
		/** C type : field1_union */
		public field1_union field1;
		/** C type : void* */
		public Pointer url;

		/** <i>native declaration : line 40</i> */
		public static class field1_union extends Union {
			/** C type : ipv4_struct */
			public ipv4_struct ipv4;
			/** C type : ipv6_struct */
			public ipv6_struct ipv6;

			/** <i>native declaration : line 41</i> */
			public static class ipv4_struct extends Structure {
				public int source;
				public int dest;
				public short sport;
				public short dport;

				public ipv4_struct() {
					super();
				}

				@Override
				protected List<?> getFieldOrder() {
					return Arrays.asList("source", "dest", "sport", "dport");
				}

				public ipv4_struct(int source, int dest, short sport, short dport) {
					super();
					this.source = source;
					this.dest = dest;
					this.sport = sport;
					this.dport = dport;
				}

				public ipv4_struct(Pointer peer) {
					super(peer);
				}

				public static class ByReference extends ipv4_struct implements Structure.ByReference {

				};

				public static class ByValue extends ipv4_struct implements Structure.ByValue {

				};
			};

			/** <i>native declaration : line 47</i> */
			public static class ipv6_struct extends Structure {
				/** C type : uint32_t[4] */
				public int[] source = new int[4];
				/** C type : uint32_t[4] */
				public int[] dest = new int[4];
				public short sport;
				public short dport;

				public ipv6_struct() {
					super();
				}

				@Override
				protected List<?> getFieldOrder() {
					return Arrays.asList("source", "dest", "sport", "dport");
				}

				/**
				 * @param source C type : uint32_t[4]<br>
				 * @param dest C type : uint32_t[4]
				 */
				public ipv6_struct(int source[], int dest[], short sport, short dport) {
					super();
					if ((source.length != this.source.length))
						throw new IllegalArgumentException("Wrong array size !");
					this.source = source;
					if ((dest.length != this.dest.length))
						throw new IllegalArgumentException("Wrong array size !");
					this.dest = dest;
					this.sport = sport;
					this.dport = dport;
				}

				public ipv6_struct(Pointer peer) {
					super(peer);
				}

				public static class ByReference extends ipv6_struct implements Structure.ByReference {

				};

				public static class ByValue extends ipv6_struct implements Structure.ByValue {

				};
			};

			public field1_union() {
				super();
			}

			/** @param ipv4 C type : ipv4_struct */
			public field1_union(ipv4_struct ipv4) {
				super();
				this.ipv4 = ipv4;
				setType(ipv4_struct.class);
			}

			/** @param ipv6 C type : ipv6_struct */
			public field1_union(ipv6_struct ipv6) {
				super();
				this.ipv6 = ipv6;
				setType(ipv6_struct.class);
			}

			public field1_union(Pointer peer) {
				super(peer);
			}

			public static class ByReference extends field1_union implements Structure.ByReference {

			};

			public static class ByValue extends field1_union implements Structure.ByValue {

			};
		};

		public apt_conntrack() {
			super();
		}

		@Override
		protected List<?> getFieldOrder() {
			return Arrays.asList("ts", "type", "protocol", "service", "data", "len", "field1", "url");
		}

		/**
		 * @param data C type : void*<br>
		 * @param field1 C type : field1_union<br>
		 * @param url C type : void*
		 */
		public apt_conntrack(long ts, byte type, byte protocol, short service, Pointer data, int len,
				field1_union field1, Pointer url) {
			super();
			this.ts = ts;
			this.type = type;
			this.protocol = protocol;
			this.service = service;
			this.data = data;
			this.len = len;
			this.field1 = field1;
			this.url = url;
		}

		public apt_conntrack(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends apt_conntrack implements Structure.ByReference {

		};

		public static class ByValue extends apt_conntrack implements Structure.ByValue {

		};
	};

	/**
	 * file info<br>
	 * <i>native declaration : line 58</i>
	 */
	public static class apt_file extends Structure {
		/** C type : apt_conntrack */
		public AptLibrary.apt_conntrack conn;
		/** C type : char* */
		public Pointer filename;

		public apt_file() {
			super();
		}

		@Override
		protected List<?> getFieldOrder() {
			return Arrays.asList("conn", "filename");
		}

		/**
		 * @param conn C type : apt_conntrack<br>
		 * @param filename C type : char*
		 */
		public apt_file(AptLibrary.apt_conntrack conn, Pointer filename) {
			super();
			this.conn = conn;
			this.filename = filename;
		}

		public apt_file(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends apt_file implements Structure.ByReference {

		};

		public static class ByValue extends apt_file implements Structure.ByValue {

		};
	};

	/**
	 * ids event<br>
	 * <i>native declaration : line 66</i>
	 */
	public static class apt_alter extends Structure {
		/** C type : apt_conntrack */
		public AptLibrary.apt_conntrack conn;
		public long id;

		public apt_alter() {
			super();
		}

		@Override
		protected List<?> getFieldOrder() {
			return Arrays.asList("conn", "id");
		}

		/** @param conn C type : apt_conntrack */
		public apt_alter(AptLibrary.apt_conntrack conn, long id) {
			super();
			this.conn = conn;
			this.id = id;
		}

		public apt_alter(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends apt_alter implements Structure.ByReference {

		};

		public static class ByValue extends apt_alter implements Structure.ByValue {

		};
	};

	/**
	 * init the handle<br>
	 * Original signature : <code>apt_stream* apt_stream_init(const char*, const char*)</code><br>
	 * <i>native declaration : line 77</i><br>
	 * @deprecated use the safer methods {@link #apt_stream_init(java.lang.String, java.lang.String)} and {@link #apt_stream_init(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	AptLibrary.apt_stream apt_stream_init(Pointer lib_dir, Pointer output_dir);

	/**
	 * init the handle<br>
	 * Original signature : <code>apt_stream* apt_stream_init(const char*, const char*)</code><br>
	 * <i>native declaration : line 77</i>
	 */
	AptLibrary.apt_stream apt_stream_init(String lib_dir, String output_dir);

	/**
	 * destroy the handle<br>
	 * Original signature : <code>int apt_stream_destroy(apt_stream*)</code><br>
	 * <i>native declaration : line 80</i>
	 */
	int apt_stream_destroy(AptLibrary.apt_stream stream);

	/**
	 * loop func. output is the common pointer, check the return value as type<br>
	 * Original signature : <code>int apt_stream_loop(apt_stream*, void**)</code><br>
	 * <i>native declaration : line 83</i>
	 */
	int apt_stream_loop(AptLibrary.apt_stream stream, PointerByReference output);

	/**
	 * push more buffer to handle<br>
	 * Original signature : <code>int apt_stream_push(apt_stream*, const char*, int)</code><br>
	 * <i>native declaration : line 86</i><br>
	 * @deprecated use the safer methods {@link #apt_stream_push(apt.AptLibrary.apt_stream, java.lang.String, int)} and {@link #apt_stream_push(apt.AptLibrary.apt_stream, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	int apt_stream_push(AptLibrary.apt_stream stream, Pointer buf, int len);

	/**
	 * push more buffer to handle<br>
	 * Original signature : <code>int apt_stream_push(apt_stream*, const char*, int)</code><br>
	 * <i>native declaration : line 86</i>
	 */
	int apt_stream_push(AptLibrary.apt_stream stream, String buf, int len);

	/**
	 * free the memory of putput data<br>
	 * Original signature : <code>int apt_stream_output_free(void*, int)</code><br>
	 * <i>native declaration : line 89</i>
	 */
	int apt_stream_output_free(Pointer output, int type);

	public static class apt_stream extends PointerType {
		public apt_stream(Pointer address) {
			super(address);
		}

		public apt_stream() {
			super();
		}
	};
}
